version: '3.7'
services:
  gateway:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
      target: development
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: npm run start:devdocker gateway
    env_file:
      - ./apps/gateway/.env
    volumes:
      - .:/app
      - node_modules:/app/node_modules

    ports:
      - 8000:8000

  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: npm run start:devdocker auth
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./apps/auth/.env
    volumes:
      - .:/app
      - node_modules:/app/node_modules

    ports:
      - 8001:8001

  reservation:
    build:
      context: .
      dockerfile: ./apps/reservation/Dockerfile
      target: development
    command: npm run start:devdocker reservation
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./apps/reservation/.env
    volumes:
      - .:/app
      - node_modules:/app/node_modules

    ports:
      - 8002:8002

  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod --port 27018
    ports:
      - 27018:27018
    volumes:
      - ./db/data/db:/data/db
      - ./db/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js

  rabbitmq:
    image: rabbitmq:management
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 30s
      retries: 10

volumes:
  node_modules:
